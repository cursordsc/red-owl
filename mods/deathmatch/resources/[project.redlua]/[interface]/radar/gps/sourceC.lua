local disallowedNodes = {
{2162720,2162719}, 
{2162712,2163115}, 
{2163121,2163120}, 
{2163119,2163118}, 
{2163117,2163116}, 
{2163106,2163114}, 
{2163113,2163112}, 
{2163111,2163110}, 
{2163109,2163108}, 
{2163139,2163138}, 
{2163137,2163136}, 
{2163135,2163134}, 
{2163133,2163122}, 
{2163131,2163130}, 
{2163129,2163128}, 
{2163127,2163126}, 
{2163125,2163124}, 
{2163123,2162705}, 
{2162702,2162704}, 
{2163161,2163170}, 
{2163169,2163168}, 
{2163167,2163166}, 
{2163165,2163164}, 
{2163163,2163162}, 
{2163156,2163160}, 
{2163159,2163158}, 
{2163157,2163147}, 
{2163155,2163154}, 
{2163153,2163152}, 
{2163151,2163150}, 
{2163149,2163148}, 
{1639007,1639008}, 
{1639009,1639010}, 
{1639011,1639012}, 
{1639004,1639014}, 
{1639015,1639016}, 
{1639017,1639018}, 
{1639013,1639020}, 
{1639021,1639022}, 
{1639023,1639024}, 
{1639025,1639019}, 
{1639026,1639029}, 
{1638513,1638512}, 
{1638511,1638510}, 
{1638509,1638508}, 
{1638507,1638506}, 
{1638505,1638494}, 
{1638503,1638502}, 
{1638501,1638500}, 
{1638499,1638498}, 
{1638497,1638496}, 
{1638564,1638565}, 
{1638571,1638570}, 
{1638569,1638568}, 
{1638567,1638566}, 
{1638433,1638545}, 
{1638553,1638552}, 
{1638551,1638550}, 
{1638549,1638548}, 
{1638547,1638546}, 
{1638544,1114158}, 
{1114160,1114161}, 
{1114162,1114163}, 
{1114164,1114165}, 
{1114166,1114167}, 
{1114168,1114159}, 
{1114143,1114144}, 
{1638978,1638979}, 
{1638980,1638973}, 
{1638982,1638983}, 
{1638984,1638985}, 
{1638986,1638981}, 
{1638422,1638431}, 
{1638430,1638429}, 
{1638428,1638427}, 
{1638426,1638425}, 
{1638424,1638423}, 
{1638526,1638527}, 
{1638528,1638529}, 
{1638530,1638531}, 
{1638532,1638533}, 
{1638524,1638544}, 
{1114370,1114369}, 
{1114368,1114367}, 
{1114374,1114375}, 
{1114376,1114377}, 
{1114381,1114360}, 
{1114396,1114395}, 
{1114394,1114393}, 
{1114383,1114133}, 
{1114135,1114134}, 
{1114149,1114157}, 
{1114156,1114155}, 
{1114154,1114153}, 
{1114152,1114151}, 
{1114150,1114145}, 
{1114146,1114147}, 
{1114148,1638534}, 
{1638514,1638523}, 
{1638522,1638521}, 
{1638520,1638519}, 
{1638518,1638517}, 
{1638516,1638515}, 
{1638539,1638540}, 
{1638541,1638542}, 
{1638543,1638535}, 
{1638432,1638989}, 
{1638990,1638991}, 
{1638992,1638993}, 
{1638994,1638995}, 
{1638996,1638997}, 
{1638988,1638999}, 
{1639000,1639001}, 
{1638998,1639003}, 
{1638563,1638562}, 
{1638561,1638560}, 
{1638559,1638558}, 
{1638557,1638556}, 
{1638554,1639031}, 
{1639032,1639034}, 
{1639035,1639036}, 
{1639037,1639038}, 
{1639039,1639033}, 
{1639030,1638434}, 
{1638436,2162709}, 
{2162708,2162707}, 
{2162710,2162706}, 
{2163050,2163097}, 
{2163105,2163104}, 
{2163103,2163102}, 
{2163101,2163100}, 
{2163099,2163098}, 
{2163090,2163096}, 
{2163095,2163094}, 
{2163093,2163092}, 
{1638956,1638957}, 
{1638958,1638959}, 
{1638960,1638961}, 
{1638962,1638963}, 
{1638954,1638965}, 
{1638966,1638967}, 
{1638968,1638969}, 
{1638970,1638971}, 
{2163053,2163054}, 
{2163055,2163056}, 
{2163057,2163058}, 
{2163059,2163060}, 
{2163051,2163062}, 
{2163063,2163064}, 
{2163065,2163066}, 
{2163067,2163068}, 
{2163069,2163070}, 
{2163061,2163072}, 
{2163071,2163074}, 
{2163075,2163076}, 
{2163073,2162711}, 
{2162713,2162714}, 
{2162715,2162716}, 
{2162717,2162718}, 
{2752512,2752523}, 
{2163079,2163080}, 
{2163081,2163082}, 
{2163083,2163077}, 
{2163085,2163086}, 
{1638971,1638970}, 
{1638969,1638968}, 
{1638967,1638966}, 
{1638965,1638954}, 
{1638963,1638962}, 
{1638961,1638960}, 
{1638959,1638958}, 
{1639028,1639027}, 
{1638987,1638441}, 
{1638443,1638442}, 
{1572919,1572926}, 
{1572925,1572924}, 
{1572923,1572922}, 
{1572921,1572920}, 
{1572907,1572912}, 
{1572911,1572910}, 
{1572909,1572908}, 
{1572936,1572901}, 
{1572902,1572903}, 
{1572904,1572905}, 
{1572906,1048589}, 
{1048588,1048865}, 
{1048866,1048867}, 
{1048868,1048864}, 
{1048833,1048836}, 
{1048835,1048834}, 
{1048824,1048832}, 
{1048831,1048830}, 
{1048829,1048828}, 
{1048827,1048826}, 
{1048825,1048814}, 
{1048823,1048822}, 
{1048821,1048820}, 
{1048819,1048818}, 
{1048817,1048816}, 
{1048815,524301}, 
{524310,524309}, 
{524308,524307}, 
{524306,524305}, 
{524304,524303}, 
{524302,524292}, 
{524300,524299}, 
{524298,524297}, 
{524296,524295}, 
{524294,524293}, 
{524288,524289}, 
{524290,524291}, 
{524630,524625}, 
{524629,524628}, 
{524627,524626}, 
{115,114}, 
{524632,116}, 
{122,121}, 
{120,119}, 
{118,117}, 
{107,108}, 
{112,111}, 
{110,135}, 
{140,139}, 
{138,137}, 
{0,6}, 
{5,4}, 
{3,2}, 
{1,37}, 
{38,39}, 
{65604,65603}, 
{65682,65608}, 
{65609,65610}, 
{65611,65612}, 
{65613,65614}, 
{65607,65606}, 
{65631,65632}, 
{65629,65628}, 
{65627,65644}, 
{65636,65637}, 
{65638,65639}, 
{65640,65641}, 
{65642,65634}, 
{65647,65646}, 
{65536,65541}, 
{65540,65539}, 
{65538,65537}, 
{131127,131126}, 
{131125,131124}, 
{131114,131123}, 
{131122,131121}, 
{131120,131119}, 
{131118,131117}, 
{131116,131115}, 
{131104,131113}, 
{131112,131111}, 
{131110,131109}, 
{131108,131107}, 
{131106,131105}, 
{131103,196624}, 
{196623,196622}, 
{196621,196620}, 
{196619,196618}, 
{196617,196753}, 
{196754,196755}, 
{196756,196757}, 
{196758,196759}, 
{196760,196761}, 
{196752,196660}, 
{196661,196662}, 
{196663,196664}, 
{196764,196765}, 
{196763,196666}, 
{196667,196668}, 
{196669,196670}, 
{196671,196672}, 
{196673,196665}, 
{196675,196676}, 
{196677,196678}, 
{196679,196680}, 
{196681,196682}, 
{196683,196674}, 
{196685,196686}, 
{196687,196688}, 
{196689,196690}, 
{196691,196692}, 
{196684,196694}, 
{196695,196696}, 
{196697,196693}, 
{196784,196793}, 
{196794,196795}, 
{196796,196797}, 
{196798,196792}, 
{196699,196700}, 
{196701,196702}, 
{196698,196615}, 
{196616,720939}, 
{720938,720937}, 
{720936,720935}, 
{720934,720933}, 
{720932,721063}, 
{721064,721065}, 
{721066,721067}, 
{721068,721069}, 
{721070,721071}, 
{721062,721193}, 
{721073,721074}, 
{721075,721076}, 
{721077,721072}, 
{721229,721230}, 
{721228,721227}, 
{721080,721081}, 
{721082,721083}, 
{721084,721085}, 
{721079,721078}, 
{1245264,1245265}, 
{1245266,1245267}, 
{1245268,1245269}, 
{1245270,1245263}, 
{1245272,1245271}, 
{1245319,1245320}, 
{1245321,1245318}, 
{1245308,1245317}, 
{1245316,1245315}, 
{1245314,1245313}, 
{1245312,1245311}, 
{1245310,1245309}, 
{1245300,1245307}, 
{1245306,1245305}, 
{1245304,1245303}, 
{1245302,1245301}, 
{1245823,1245824}, 
{1245825,1245826}, 
{1310832,1310773}, 
{1310782,1310781}, 
{1310780,1310779}, 
{1310778,1310777}, 
{1310776,1310775}, 
{1310774,1310763}, 
{1310772,1310771}, 
{1310770,1310769}, 
{1310768,1310767}, 
{1310766,1310765}, 
{1310764,1310762}, 
{1310753,1310761}, 
{1310760,1310759}, 
{1310758,1310757}, 
{1310756,1310755}, 
{1310754,1310743}, 
{1310752,1310751}, 
{1310750,1310749}, 
{1310748,1310747}, 
{1310746,1310745}, 
{1310744,1310742}, 
{1310733,1310739}, 
{1310740,1310741}, 
{1310738,1310737}, 
{1310736,1310735}, 
{1310786,1310787}, 
{1310788,1310789}, 
{1310790,1310791}, 
{1310792,1310783}, 
{1310794,1310795}, 
{1310796,1310797}, 
{1310798,1310799}, 
{1310800,1310801}, 
{1310802,1310793}, 
{1310804,1310805}, 
{1310806,1310807}, 
{1310808,1310809}, 
{1310810,1310811}, 
{1310812,1310803}, 
{1310814,1310815}, 
{1310816,1310817}, 
{1310818,1310819}, 
{1310820,1310821}, 
{1310822,1310813}, 
{1310824,1310825}, 
{1310826,1310827}, 
{1310828,1310829}, 
{1310830,1310831}, 
{1310823,1245274}, 
{1245281,1245280}, 
{1245279,1245278}, 
{1245277,1245276}, 
{1245275,1245273}, 
{1245283,1245284}, 
{1245282,721087}, 
{721088,721089}, 
{721090,721091}, 
{721092,721093}, 
{721094,721095}, 
{721086,721096}, 
{721098,721097}, 
{720940,720947}, 
{720946,720945}, 
{720944,720943}, 
{720942,720941}, 
{721058,721061}, 
{721060,721059}, 
{721049,721057}, 
{721056,721055}, 
{721054,721053}, 
{721052,721051}, 
{721050,720995}, 
{720997,720996}, 
{720991,720994}, 
{720993,720992}, 
{196751,196750}, 
{196749,196748}, 
{196747,196737}, 
{196746,196745}, 
{196744,196743}, 
{196742,196741}, 
{196740,196739}, 
{196738,196727}, 
{196736,196735}, 
{196734,196733}, 
{196732,196731}, 
{196730,196729}, 
{196728,196726}, 
{262157,262156}, 
{262155,262154}, 
{262153,262152}, 
{262151,262150}, 
{262149,262144}, 
{262148,262147}, 
{262146,262145}, 
{196725,196724}, 
{196723,196713}, 
{196722,196721}, 
{196720,196719}, 
{196718,196717}, 
{196716,196715}, 
{196714,196703}, 
{196712,196711}, 
{196710,196709}, 
{196708,196707}, 
{196706,196705}, 
{196704,196625}, 
{196633,196632}, 
{196631,196630}, 
{196629,196628}, 
{196627,196626}, 
{131157,131147}, 
{131156,131155}, 
{131154,131153}, 
{131152,131151}, 
{131150,131149}, 
{131148,131138}, 
{131146,131145}, 
{131144,131143}, 
{131142,131141}, 
{131140,131139}, 
{131128,131137}, 
{131136,131135}, 
{131134,131133}, 
{131132,131131}, 
{131130,131129}, 
{65561,65562}, 
{65563,65564}, 
{65565,65566}, 
{65663,65599}, 
{65600,65601}, 
{65602,65761}, 
{65767,65766}, 
{65765,65764}, 
{1245421,1245338}, 
{1245339,1310727}, 
{1310726,1310725}, 
{1310724,1310723}, 
{1310722,1310720}, 
{1310721,1245337}, 
{1245336,1245335}, 
{1245334,1245333}, 
{65661,65662}, 
{65660,65653}, 
{65654,65655}, 
{65656,65659}, 
{65658,65657}, 
{65752,65757}, 
{65756,65755}, 
{65615,65619}, 
{65618,65617}, 
{65661,65662}, 
{65660,65653}, 
{65654,65655}, 
{65656,65659}, 
{65658,65657}, 
{65752,65757}, 
{65756,65755}, 
{65754,65753}, 
{65746,65747}, 
{65751,65750}, 
{65749,65748}, 
{65622,65626}, 
{65625,65624}, 
{65623,42}, 
{41,40}, 
{30,31}, 
{32,33}, 
{36,35}, 
{34,64}, 
{66,67}, 
{68,69}, 
{70,71}, 
{72,73}, 
{74,65}, 
{76,77}, 
{78,79}, 
{83,84}, 
{85,86}, 
{87,88}, 
{89,90}, 
{81,92}, 
{93,94}, 
{95,96}, 
{97,98}, 
{99,100}, 
{91,101}, 
{524620,524621}, 
{524622,524623}, 
{524624,524619}, 
{62,57}, 
{59,58}, 
{524618,524617}, 
{524616,524615}, 
{524614,524613}, 
{524612,524611}, 
{524611,524328}, 
{524331,524330}, 
{524329,524318}, 
{524327,524326}, 
{524325,524324}, 
{524323,524322}, 
{524321,524320}, 
{524319,524311}, 
{524317,524316}, 
{524315,524314}, 
{524313,524312}, 
{1048591,1048590}, 
{1048592,1048857}, 
{1048863,1048862}, 
{1048861,1048860}, 
{1048859,1048858}, 
{1048847,1048856}, 
{1048855,1048854}, 
{1048853,1048852}, 
{1048851,1048850}, 
{1048849,1048848}, 
{1048837,1048846}, 
{1048845,1048844}, 
{1048843,1048842}, 
{1048841,1048840}, 
{1048839,1048838}, 
{1048586,1048587}, 
{1572900,1572899}, 
{1572898,1572897}, 
{1572896,1572895}, 
{1572915,1572916}, 
{1572917,1572918}, 
{1572913,1572928}, 
{1572929,1572930}, 
{1572931,1572932}, 
{1572933,1572934}, 
{1572935,1572927}, 
{1638438,1638439}, 
{1639242,1638972}, 
{1639304,1639305}, 
{2687401,2687394}, 
{2687400,2687399}, 
{2687398,2687397}, 
{2687408,2687330}, 
{2687310,2687309}, 
{2687308,2687307}, 
{2687306,2687305}, 
{2687304,2687299}, 
{2687302,2687301}, 
{2687283,2687284}, 
{2687285,2687281}, 
{2687287,2687288}, 
{2687274,2687273}, 
{2687272,2687271}, 
{2687270,2687260}, 
{2687268,2687267}, 
{2687266,2687265}, 
{2687264,2687263}, 
{2687262,2687261}, 
{2687380,2687381}, 
{2687382,2687383}, 
{2687373,2687244}, 
{2687245,2687246}, 
{2687247,2687243}, 
{2687249,2687250}, 
{2687251,2687252}, 
{2687253,2687254}, 
{2687255,2687248}, 
{2687257,2687258}, 
{2687256,2687259}, 
{2687290,2687291}, 
{2687292,2687293}, 
{2687294,2687295}, 
{2687296,2687297}, 
{2687298,2687289}, 
{2687312,2687313}, 
{2687314,2687315}, 
{2687316,2687317}, 
{2687318,2687319}, 
{2687320,2687311}, 
{2687322,2687323}, 
{2687324,2687321}, 
{2687326,2687325}, 
{2687340,2687339}, 
{2687410,2687413}, 
{2687415,2687414}, 
{2687402,2687406}, 
{2687405,2687404}, 
{2687446,2687447}, 
{2687448,2687444}, 
{2687449,2687451}, 
{2687453,2687452}, 
{2687450,2687455}, 
{2687456,2687457}, 
{2687458,2687459}, 
{2687460,2687461}, 
{2687462,2687463}, 
{2687454,2687464}, 
{2687465,2687466}, 
{2687467,2621816}, 
{2621817,2621818}, 
{2621819,2621815}, 
{2621821,2621822}, 
{2621823,2621824}, 
{2621820,2621756}, 
{2622095,2622098}, 
{2622097,2622096}, 
{2622094,2621768}, 
{2621773,2621772}, 
{2621771,2621770}, 
{2621769,2621767}, 
{2621796,2621802}, 
{2621801,2621800}, 
{2621799,2621798}, 
{2621797,2621697}, 
{2621692,2621693}, 
{2621696,2621695}, 
{2621694,2621689}, 
{2621688,2621691}, 
{2621690,2621781}, 
{2621785,2621787}, 
{2621786,2621640}, 
{2621642,2621643}, 
{2621644,2621641}, 
{2621626,2621633}, 
{2621628,2621629}, 
{2621630,2621631}, 
{2621632,2621639}, 
{2621672,2621673}, 
{2621674,2621675}, 
{2621676,2621677}, 
{2621678,2621679}, 
{2621680,2621671}, 
{2621681,2621682}, 
{2621683,2621684}, 
{2621685,2621686}, 
{2621687,3145802}, 
{3145803,3145801}, 
{3145805,3145806}, 
{3145807,3145808}, 
{2621658,2621657}, 
{2621655,2621646}, 
{2621649,2621648}, 
{2621647,2621627}, 
{2621778,2621780}, 
{2621779,2621774}, 
{2621775,2621777}, 
{2621776,2621645}, 
{2621699,2621707}, 
{2621706,2621705}, 
{2621704,2621703}, 
{2621702,2621701}, 
{2621700,2621698}, 
{2621864,2621788}, 
{2621794,2621793}, 
{2621792,2621791}, 
{2621790,2621789}, 
{2621795,2621803}, 
{2621805,2621806}, 
{2621804,2621757}, 
{2621766,2621765}, 
{2621764,2621763}, 
{2621762,2621761}, 
{2621760,2621759}, 
{2621758,2621755}, 
{2621807,2621808}, 
{2621809,2621810}, 
{2621811,2621812}, 
{2621813,2621814}, 
{2687425,2687424}, 
{2687427,2687428}, 
{2687429,2687430}, 
{2687431,2687432}, 
{2687433,2687434}, 
{2687426,2687472}, 
{2687473,2687493}, 
{2687499,2687500}, 
{2687498,2687468}, 
{2687470,2687471}, 
{2687469,2687435}, 
{2687437,2687438}, 
{2687439,2687440}, 
{2687441,2687436}, 
{1114401,1114400}, 
{1114399,1114398}, 
{1114393,1114394}, 
{1114395,1114396}, 
{1114389,1114448}, 
{1114450,1114451}, 
{1114445,1114444}, 
{1114443,1114442}, 
{1114441,1114440}, 
{1114426,1114427}, 
{1114428,1114429}, 
{1114430,1114431}, 
{1114432,1114433}, 
{1114424,1114435}, 
{1114436,1114437}, 
{786908,786907}, 
{786808,786811}, 
{786810,786809}, 
{786743,786744}, 
{786745,786746}, 
{786735,786736}, 
{786737,786738}, 
{786739,786732}, 
{786467,786468}, 
{786469,786470}, 
{786471,786472}, 
{786473,786474}, 
{786475,786466}, 
{786477,786478}, 
{786479,786480}, 
{786481,786482}, 
{786483,786484}, 
{786485,786476}, 
{786820,786487}, 
{786488,786489}, 
{786490,786491}, 
{786492,786493}, 
{786494,786495}, 
{786689,786690}, 
{786691,786692}, 
{786693,786694}, 
{852217,852218}, 
{852219,852220}, 
{852224,852225}, 
{852226,852227}, 
{852228,852229}, 
{852233,852234}, 
{852235,852236}, 
{852237,852238}, 
{852252,852253}, 
{852254,852249}, 
{852258,852256}, 
{852261,852263}, 
{852262,852177}, 
{852161,852168}, 
{852167,852166}, 
{852165,852164}, 
{852163,852162}, 
{327791,327790}, 
{327833,327832}, 
{327770,327779}, 
{327778,327777}, 
{327776,327775}, 
{327774,327773}, 
{327772,327771}, 
{327781,327782}, 
{327783,327784}, 
{327785,327786}, 
{327787,327788}, 
{327789,327830}, 
{327831,327829}, 
{327792,327793}, 
{852170,852171}, 
{852172,852173}, 
{852174,852175}, 
{852176,852169}, 
{852178,852259}, 
{852260,852334}, 
{852332,852424}, 
{852425,852423}, 
{852418,852361}, 
{852247,852246}, 
{852245,852244}, 
{852243,852242}, 
{852248,852350}, 
{852352,852360}, 
{852359,852358}, 
{852357,852356}, 
{852355,852354}, 
{852353,852348}, 
{852240,852241}, 
{852345,786695}, 
{786704,786703}, 
{786702,786701}, 
{786700,786699}, 
{786698,786697}, 
{786696,786804}, 
{786805,786806}, 
{786807,786496}, 
{786505,786504}, 
{786503,786502}, 
{786501,786500}, 
{786499,786498}, 
{786439,786440}, 
{786441,786442}, 
{786443,786444}, 
{786445,786446}, 
{786437,786448}, 
{786449,786450}, 
{786451,786452}, 
{786453,786454}, 
{786455,786456}, 
{786447,786458}, 
{786459,786460}, 
{786461,786462}, 
{786463,786464}, 
{786465,786457}, 
{786728,786727}, 
{786749,786750}, 
{786816,786813}, 
{786814,786815}, 
{2490542,2490537}, 
{2490541,2490540}, 
{2490539,2490538}, 
{2490536,2490528}, 
{2490535,2490534}, 
{2490533,2490532}, 
{2490531,2490530}, 
{2490529,1966157}, 
{1966166,1966165}, 
{1966164,1966163}, 
{1966162,1966161}, 
{1966160,1966159}, 
{1966158,1966147}, 
{1966156,1966155}, 
{1966154,1966153}, 
{1966152,1966151}, 
{1966150,1966149}, 
{1966148,1966168}, 
{1966169,1966167}, 
{1966251,1966253}, 
{1966252,1966177}, 
{1966181,1966180}, 
{1966179,1966178}, 
{1966135,1442684}, 
{1442693,1442692}, 
{1442691,1442690}, 
{1442689,1442688}, 
{1442687,1442686}, 
{1442685,1442674}, 
{1442683,1442682}, 
{1442681,1442680}, 
{1442679,1442678}, 
{1442677,1442676}, 
{1442675,1442287}, 
{1442290,1442291}, 
{1442292,1442293}, 
{1442294,1442295}, 
{1442296,1442289}, 
{1442297,1442299}, 
{1442298,1441801}, 
{1442278,1442282}, 
{1442281,1442280}, 
{1442279,1442276}, 
{1442277,918110}, 
{918109,918108}, 
{918107,918106}, 
{918105,918104}, 
{918103,917555}, 
{917595,917590}, 
{917591,917592}, 
{917593,917594}, 
{917768,917769}, 
{917770,917771}, 
{917772,917773}, 
{917774,917775}, 
{917776,917767}, 
{917777,852077}, 
{852078,852079}, 
{852080,852081}, 
{852082,852083}, 
{852084,852076}, 
{852337,852340}, 
{852339,852338}, 
{327812,327818}, 
{327813,327814}, 
{327815,327816}, 
{327817,327811}, 
{327847,327849}, 
{327848,327733}, 
{327738,327739}, 
{327740,327735}, 
{327736,327734}, 
{327737,327861}, 
{327866,327869}, 
{327868,327867}, 
{327749,327750}, 
{327751,327752}, 
{327748,327747}, 
{393297,393302}, 
{393301,393300}, 
{393299,393298}, 
{393286,393285}, 
{393284,393283}, 
{393282,393281}, 
{393280,393279}, 
{393242,393241}, 
{393244,393246}, 
{393245,393243}, 
{393247,393249}, 
{393248,458756}, 
{458878,458882}, 
{458883,458881}, 
{983172,983171}, 
{983616,983617}, 
{983618,983619}, 
{983615,983265}, 
{983273,983272}, 
{983271,983270}, 
{983269,983268}, 
{983267,983266}, 
{983253,983254}, 
{983255,983256}, 
{983257,983258}, 
{983259,983252}, 
{983249,983247}, 
{983624,983625}, 
{983626,983627}, 
{983303,983304}, 
{983305,983306}, 
{983307,983308}, 
{983309,983310}, 
{983301,983312}, 
{983313,983311}, 
{983289,983284}, 
{983287,983286}, 
{983285,1507786}, 
{1507785,1507784}, 
{1507783,1507782}, 
{1507781,1507771}, 
{1507780,1507779}, 
{1507778,1507777}, 
{1507776,1507775}, 
{1507774,1507773}, 
{1507789,1507790}, 
{1507791,1507792}, 
{1507793,1507794}, 
{1507795,1507796}, 
{1507787,1507798}, 
{1507799,1507800}, 
{1507797,1507947}, 
{1507948,2031803}, 
{2031802,2031801}, 
{2031800,2031799}, 
{2031798,2031797}, 
{2031788,2031789}, 
{2031796,2031795}, 
{2031794,2031793}, 
{2031792,2031791}, 
{2031790,2031852}, 
{2031853,2031854}, 
{2031641,2031642}, 
{2031643,2031644}, 
{2031645,2031646}, 
{2031650,2031651}, 
{2031652,2556144}, 
{2556145,2556146}, 
{2556143,2556138}, 
{2556142,2556141}, 
{2556140,2556139}, 
{2556137,2556056}, 
{2556058,2556057}, 
{2556046,2556055}, 
{2556054,2556053}, 
{2556052,2556051}, 
{2556050,2556049}, 
{2556048,2556047}, 
{2556040,2556045}, 
{2556044,2556043}, 
{2556042,2556041}, 
{2490475,2490473}, 
{2490474,2490468}, 
{2490469,2490470}, 
{2490471,2490472}, 
{2490898,2490899}, 
{2490900,2490914}, 
{2490917,2490916}, 
{2490915,2490913}, 
{2490918,2490922}, 
{2490921,2490920}, 
{2490919,2490634}, 
{2490460,2490461}, 
{2490462,2490463}, 
{2490464,2490465}, 
{2490466,2490467}, 
{2490459,2490545}, 
{2490409,2490418}, 
{2490417,2490416}, 
{2490415,2490414}, 
{2490413,2490412}, 
{2490411,2490410}, 
{2490408,2490405}, 
{2490407,2490406}, 
{2490923,2490395}, 
{2490404,2490403}, 
{2490402,2490401}, 
{2490400,2490399}, 
{2490398,2490397}, 
{2490396,2555947}, 
{2556059,2555937}, 
{2555946,2555945}, 
{2555944,2555943}, 
{2555942,2555941}, 
{2555940,2555939}, 
{2555938,2555927}, 
{2555936,2555935}, 
{2555934,2555933}, 
{2555932,2555931}, 
{2555930,2555929}, 
{2555928,2556136}, 
{2555924,2555922}, 
{2555923,2555926}, 
{2555925,2031640}, 
{2031639,2031649}, 
{2031647,2031648}, 
{2031778,2031787}, 
{2031786,2031785}, 
{2031784,2031783}, 
{2031782,2031781}, 
{2031780,2031779}, 
{2031805,2031814}, 
{2031813,2031812}, 
{2031811,2031810}, 
{2031809,2031808}, 
{2031775,2031776}, 
{2031777,2031756}, 
{1507832,1507834}, 
{1507833,1507802}, 
{1507803,1507804}, 
{1507805,1507806}, 
{1507807,1507808}, 
{1507809,1507810}, 
{1507801,1507812}, 
{1507813,1507814}, 
{1507815,1507816}, 
{1507957,1507956}, 
{1507955,1507818}, 
{1507819,1507820}, 
{1507821,1507822}, 
{1507823,1507824}, 
{1507825,1507826}, 
{1507817,1507827}, 
{1507828,1507829}, 
{1507830,1507831}, 
{983319,983320}, 
{983321,983322}, 
{983318,983314}, 
{983315,983316}, 
{983639,983291}, 
{983300,983299}, 
{983298,983297}, 
{983296,983295}, 
{983294,983293}, 
{983244,983245}, 
{983251,983236}, 
{983261,983264}, 
{983263,983262}, 
{983275,983276}, 
{983277,983278}, 
{983279,983280}, 
{983281,983282}, 
{983283,983274}, 
{983620,983622}, 
{983621,983174}, 
{983175,983173}, 
{458754,458875}, 
{458877,458876}, 
{393512,393511}, 
{393510,393509}, 
{393508,393507}, 
{393506,393503}, 
{393255,393254}, 
{393253,393252}, 
{393250,393251}, 
{393480,393479}, 
{393478,393477}, 
{393287,393288}, 
{393289,393290}, 
{393291,393292}, 
{393293,393294}, 
{393295,393296}, 
{393304,393305}, 
{393306,393307}, 
{393308,393309}, 
{393303,327753}, 
{327754,327758}, 
{327757,327756}, 
{327755,327856}, 
{327857,327855}, 
{327854,327763}, 
{327762,327759}, 
{327760,327761}, 
{327873,327871}, 
{327741,327743}, 
{327742,327744}, 
{327746,327745}, 
{327732,327870}, 
{327690,327841}, 
{327842,327843}, 
{327844,327845}, 
{327846,852336}, 
{852142,852323}, 
{852130,852138}, 
{852137,852136}, 
{852135,852134}, 
{852133,852132}, 
{852131,917788}, 
{917778,917787}, 
{917786,917785}, 
{917784,917783}, 
{917782,917781}, 
{917780,917779}, 
{917586,917589}, 
{917588,917587}, 
{917554,918094}, 
{918095,918096}, 
{918097,918098}, 
{918099,918100}, 
{918101,918102}, 
{1442269,1442271}, 
{1442272,1442273}, 
{1442274,1442275}, 
{1442270,1441800}, 
{1442301,1442302}, 
{1442303,1442304}, 
{1442305,1442306}, 
{1442307,1442308}, 
{1442300,1442310}, 
{1442311,1442312}, 
{1442313,1442309}, 
{1442288,1442283}, 
{1442286,1442285}, 
{1442284,1441806}, 
{1441813,1441812}, 
{1441811,1441810}, 
{1441809,1441808}, 
{1441807,1966136}, 
{1966176,1966175}, 
{1966254,1966170}, 
{1966174,1966173}, 
{1966172,1966171}, 
{1966137,1966146}, 
{1966145,1966144}, 
{1966143,1966142}, 
{1966141,1966140}, 
{1966139,1966138}, 
{1966080,1966089}, 
{1966088,1966087}, 
{1966086,1966085}, 
{1966084,1966083}, 
{1966082,1966081}, 
{2490518,2490527}, 
{2490526,2490525}, 
{2490524,2490523}, 
{2490522,2490521}, 
{2490520,2490519}, 
{2490517,2490515}, 
{2490516,2490513}, 
{2490514,2490709}, 
{2490429,2490438}, 
{2490437,2490436}, 
{2490435,2490434}, 
{2490433,2490432}, 
{2490431,2490430}, 
{2490419,2490428}, 
{2490427,2490426}, 
{2490425,2490424}, 
{2490423,2490422}, 
{2490421,2490420}, 
{1442628,1442623}, 
{1442613,1442614}, 
{1442622,1442621}, 
{1442620,1442619}, 
{1442618,1442617}, 
{1442616,1442615}, 
{1442602,1442605}, 
{1442606,1442607}, 
{1442608,1442609}, 
{1442527,1442533}, 
{1442532,1442531}, 
{1442530,1442529}, 
{1442477,1442476}, 
{1442465,1442474}, 
{1442473,1442472}, 
{1442471,1442470}, 
{1442651,1442652}, 
{1442653,1442654}, 
{1442649,1442656}, 
{1442657,1442658}, 
{1442659,1442660}, 
{1442661,1442662}, 
{1442663,1442655}, 
{1442665,1442666}, 
{1442667,1442668}, 
{1442669,1442670}, 
{1442664,1442672}, 
{917581,917582}, 
{917583,917584}, 
{983559,983560}, 
{983561,983562}, 
{983563,983564}, 
{983565,983566}, 
{983557,983568}, 
{983569,983570}, 
{983571,983572}, 
{983573,983574}, 
{983575,983576}, 
{983567,983577}, 
{983579,983578}, 
{918020,918019}, 
{918010,918018}, 
{918017,918016}, 
{918015,918014}, 
{918013,918012}, 
{918011,918006}, 
{918007,918009}, 
{918008,918005}, 
{917999,918004}, 
{918003,918002}, 
{918001,918000}, 
{917568,917571}, 
{917570,917569}, 
{917556,917579}, 
{917580,917581}, 
{1441849,1441850}, 
{917566,917567}, 
{917986,917988}, 
{917989,917990}, 
{917991,917992}, 
{917993,917987}, 
{918111,918115}, 
{918118,918117}, 
{918116,917995}, 
{917996,917997}, 
{917998,917994}, 
{918021,983539}, 
{983530,983538}, 
{983537,983536}, 
{983535,983534}, 
{983533,983532}, 
{983531,983356}, 
{983524,983529}, 
{983528,983527}, 
{983526,983525}, 
{983515,983516}, 
{983523,983522}, 
{983521,983520}, 
{983519,983518}, 
{983517,983588}, 
{983595,983596}, 
{983597,983598}, 
{983599,983600}, 
{983601,983602}, 
{983603,983594}, 
{983605,983606}, 
{983607,983608}, 
{983604,983556}, 
{786543,786544}, 
{786541,786539}, 
{786596,786597}, 
{786598,786599}, 
{786595,786895}, 
{786898,786899}, 
{786900,786901}, 
{786902,786903}, 
{786897,786896}, 
{786904,786905}, 
{1311541,1310909}, 
{1310910,1310911}, 
{1310908,1310906}, 
{1310955,1310964}, 
{1310963,1310962}, 
{1310961,1310960}, 
{1310959,1310958}, 
{1310957,1310956}, 
{1310954,1311057}, 
{1311058,1311059}, 
{1311060,1311061}, 
{1311062,1311056}, 
{1311052,1311515}, 
{1311054,1311086}, 
{1311087,1311088}, 
{1311089,1311090}, 
{1311091,1311092}, 
{1376505,1376504}, 
{1376816,1376833}, 
{1376837,1376836}, 
{1376835,1376834}, 
{1376818,1376821}, 
{1376822,1376820}, 
{1376823,1376825}, 
{1376824,1376803}, 
{1376805,1376806}, 
{1376807,1376808}, 
{1376804,1376527}, 
{1376529,1376530}, 
{1376528,1376517}, 
{1376523,1376524}, 
{1376525,1376526}, 
{1376522,1376518}, 
{1376913,1376519}, 
{1376575,1376576}, 
{1376577,1376578}, 
{1376579,1376580}, 
{1376581,1376582}, 
{1376583,1376574}, 
{1376602,1376591}, 
{1376600,1376599}, 
{1376598,1376597}, 
{1376596,1376595}, 
{1376594,1376593}, 
{1376592,1376521}, 
{1376914,1376915}, 
{1376520,1376538}, 
{1376539,1376540}, 
{1376541,1376537}, 
{1376911,1376543}, 
{1376546,1376545}, 
{1376544,1376542}, 
{1376810,1376815}, 
{1376814,1376813}, 
{1376812,1376811}, 
{1376809,1376827}, 
{1376828,1376829}, 
{1376830,1376831}, 
{1376832,1376826}, 
{1376819,1376838}, 
{1376842,1376841}, 
{1376840,1376839}, 
{1376817,1376506}, 
{1311101,1311100}, 
{1311099,1311098}, 
{1311097,1311096}, 
{1311095,1311094}, 
{1311093,1311055}, 
{1311516,1311053}, 
{1311063,1311070}, 
{1311069,1311068}, 
{1311067,1311066}, 
{1311065,1311064}, 
{1310966,1310968}, 
{1310967,1310965}, 
{1310969,1310976}, 
{1310975,1310974}, 
{1310973,1310972}, 
{1310971,1310970}, 
{1310907,1310912}, 
{1310915,1310914}, 
{1310913,786600}, 
{786609,786608}, 
{786607,786606}, 
{786605,786604}, 
{786603,786602}, 
{786601,786540}, 
{786545,786548}, 
{786547,786546}, 
{786510,786511}, 
{786507,786827}, 
{1311520,1311521}, 
{1311522,1311519}, 
{1310878,1310879}, 
{1310880,1310881}, 
{1310882,1310883}, 
{1310884,1310885}, 
{1310886,1310877}, 
{1310922,1310923}, 
{1310924,1310925}, 
{1310926,1310927}, 
{1310928,1310929}, 
{1310921,1311492}, 
{1311493,1311494}, 
{1311491,1311487}, 
{1311488,1311490}, 
{1311154,1311155}, 
{1311156,1311152}, 
{1310993,1310994}, 
{1310995,1310996}, 
{1310997,1310998}, 
{1310999,1310992}, 
{1311037,1311038}, 
{1311039,1311040}, 
{1311041,1311042}, 
{1311043,1311034}, 
{1311102,1311103}, 
{1311104,1311105}, 
{1311106,1376508}, 
{1376509,1376507}, 
{1376610,1376611}, 
{1376612,1376613}, 
{1376614,1376616}, 
{1376615,1376944}, 
{1376733,1376732}, 
{1376632,1376634}, 
{1376635,1376636}, 
{1376637,1376633}, 
{1376631,1376942}, 
{1376650,1376649}, 
{1376648,1376647}, 
{1376660,1376661}, 
{1376662,1376663}, 
{1376657,1376937}, 
{1376950,1376951}, 
{1376949,1376843}, 
{1376844,1376845}, 
{1376846,1376847}, 
{1376848,1376672}, 
{1376673,1376722}, 
{1376723,1376724}, 
{1376721,1376730}, 
{1376964,1376965}, 
{1376966,1376967}, 
{1376968,1376969}, 
{1442507,1442508}, 
{1442506,1442509}, 
{1442516,1442517}, 
{1442518,1442519}, 
{1442520,1442521}, 
{1442522,1442523}, 
{1442515,1442525}, 
{1442524,1442510}, 
{1442511,1442514}, 
{1376731,1376725}, 
{1376728,1376727}, 
{1376726,1376675}, 
{1376674,1376850}, 
{1376851,1376852}, 
{1376853,1376854}, 
{1376849,1376671}, 
{1376731,1376725}, 
{1376728,1376727}, 
{1376726,1376675}, 
{1376851,1376852}, 
{1376853,1376854}, 
{1376849,1376671}, 
{1376670,1376669}, 
{1376668,1376667}, 
{1376666,1376665}, 
{1376653,1376654}, 
{1376645,1376644}, 
{1376643,1376642}, 
{1376641,1376640}, 
{1376629,1376628}, 
{1376627,1376887}, 
{1376889,1376888}, 
{1376617,1376625}, 
{1376624,1376623}, 
{1376622,1376621}, 
{1376620,1376619}, 
{1376513,1376514}, 
{1376515,1311108}, 
{1311109,1311110}, 
{1311111,1311112}, 
{1311107,1311024}, 
{1311033,1311032}, 
{1311031,1311030}, 
{1311029,1311028}, 
{1311027,1311026}, 
{1311006,1311007}, 
{1311008,1311004}, 
{1310984,1310985}, 
{1310986,1310987}, 
{1310990,1310989}, 
{1310988,1311495}, 
{1311496,1311499}, 
{1311498,1311497}, 
{1310938,1310937}, 
{1310936,1310935}, 
{1310934,1310933}, 
{1310932,1310931}, 
{1310888,1310897}, 
{1310896,1310895}, 
{1310894,1310893}, 
{1310892,1310891}, 
{1310890,1310889}, 
{1310876,1310875}, 
{1310874,1310873}, 
{786720,786719}, 
{852313,852314}, 
{852315,852316}, 
{852317,852318}, 
{852319,852320}, 
{852311,852310}, 
{852309,852308}, 
{852307,852306}, 
{852305,852304}, 
{852303,852299}, 
{852300,852296}, 
{852298,852297}, 
{1376573,1376572}, 
{1376571,1376570}, 
{1376569,1376568}, 
{1376567,1376520}, 
{1376549,1376550}, 
{1376551,1376552}, 
{1376553,1376547}, 
{1376930,1376928}, 
{1376925,1376720}, 
{1376719,1376718}, 
{1376700,1376699}, 
{1376698,1376697}, 
{1376696,1376695}, 
{1376682,1376681}, 
{1376680,1376679}, 
{1376678,1376677}, 
{1376774,1376775}, 
{1376776,1376777}, 
{1376778,1376779}, 
{1376780,1376771}, 
{1376782,1376783}, 
{1376784,1376785}, 
{1376781,1376890}, 
{1376891,1376892}, 
{1376893,1442267}, 
{1442268,1442266}, 
{1442265,1442264}, 
{1442263,1376789}, 
{1376790,1376791}, 
{1376792,1376793}, 
{1376788,1376787}, 
{1376786,1376794}, 
{1376802,1376801}, 
{1376800,1376799}, 
{1376798,1376797}, 
{1376796,1376795}, 
{1376690,1376692}, 
{1376691,1376689}, 
{1376688,1376687}, 
{1376704,1376705}, 
{1376706,1376707}, 
{1376708,1376709}, 
{1376714,1376715}, 
{1376716,1376712}, 
{1376923,1376922}, 
{1376918,1376554}, 
{1376560,1376559}, 
{1376558,1376557}, 
{1376556,1376555}, 
{1376561,1376564}, 
{1376563,1376562}, 
{852295,852294}, 
{852293,852292}, 
{852291,852290}, 
{852289,852277}, 
{852286,852285}, 
{852284,852283}, 
{852282,852281}, 
{852280,852279}, 
{852275,852274}, 
{852273,852272}, 
{852271,852270}, 
{852269,852268}, 
{1442448,1442453}, 
{1442454,1442455}, 
{1442456,1442457}, 
{327834,327726}, 
{327796,327797}, 
{327798,327799}, 
{327800,327801}, 
{327802,327803}, 
{327794,327835}, 
{393269,393270}, 
{393271,393272}, 
{393273,393274}, 
{393275,393266}, 
{327805,327806}, 
{327804,327807}, 
{327808,327809}, 
{327766,327767}, 
{327865,327864}, 
{327860,327858}, 
{327714,327713}, 
{327712,327711}, 
{327700,327709}, 
{327708,327707}, 
{327706,327705}, 
{327704,327703}, 
{327702,327701}, 
{852140,852143}, 
{852148,852147}, 
{852146,852145}, 
{852144,327680}, 
{327689,327688}, 
{327687,327686}, 
{327685,327684}, 
{327683,327682}, 
{327820,327822}, 
{327825,327824}, 
{1441851,1442216}, 
{1442217,1442218}, 
{1442219,1442220}, 
{1442221,1442222}, 
{327730,327727},
{918114,918112}, 
{918111,1442452}, 
{1442457,1442456}, 
{1442455,1442454}, 
{983504,983505}, 
{983508,983509}, 
{983510,983511}, 
{983506,983512},
{1507837,1507835}, 
{1507501,1507510}, 
{1507509,1507508}, 
{1507507,1507506}, 
{1507505,1507504}, 
{1507503,1507502}, 
{1507543,1507542}, 
{1507540,1507551}, 
{1507893,1507894}, 
{1507883,1507892}, 
{1507891,1507890}, 
{1507889,1507888}, 
{1507887,1507886}, 
{1507885,1507884}, 
{1507865,1507866}, 
{1507867,1507868}, 
{1507869,1507870}, 
{1507871,1507872}, 
{1507863,1507874}, 
{1507875,1507876}, 
{1507882,1507873}, 
{1507939,1507940}, 
{1507852,1507851}, 
{1507850,1507839}, 
{1507848,1507847}, 
{1507846,1507845}, 
{1507844,1507843}, 
{1507842,1507841}, 
{1507838,983513}, 
{983514,983494}, 
{983503,983502}, 
{983501,983500}, 
{983499,983498}, 
{983497,983496}, 
{65910,65912}, 
{65911,590218}, 
{590217,590216}, 
{590215,590214}, 
{590213,590212}, 
{590207,590211}, 
{590210,590209}, 
{590208,65909}, 
{65908,65907}, 
{65906,65905}, 
{65906,65907}, 
{65908,65909}, 
{590208,590209}, 
{590210,590211}, 
{590207,590212}, 
{590213,590214}, 
{590215,590216}, 
{590217,590218}, 
{65911,65912}, 
{2490632,2490631}, 
{2490630,2490628}, 
{2490627,2490626}, 
{2490886,2490887}, 
{2490888,2490889}, 
{2490890,2490891}, 
{2490885,2490617}, 
{2490618,2490619}, 
{2490624,2490623}, 
{2490622,2490621}, 
{2490982,2490983}, 
{2490984,2490985}, 
{2490986,2490987}, 
{2490988,2490989}, 
{2490989,2490988}, 
{2490987,2490986}, 
{2490985,2490984}, 
{2490983,2490982}, 
{2490623,2490624}, 
{2490619,2490618}, 
{2490617,2490885}, 
{2490891,2490890}, 
{2490889,2490888}, 
{2490887,2490886}, 
{2490626,2490627}, 
{2490628,2490630}, 
{2490631,2490632}, 
{2490894,2490895}, 
{2490896,2490892}, 
{2490897,2490902}, 
{2490903,2490904}, 
{2490905,2490901}, 
{2490898,2490925}, 
{2490924,2490923}, 
{2490933,2490934}, 
{2490935,2490936}, 
{2490937,2490938}, 
{2490939,2490940}, 
{2490940,2490939}, 
{2490938,2490937}, 
{2490936,2490935}, 
{2490934,2490933}, 
{2490923,2490924}, 
{2490925,2490898}, 
{2490901,2490905}, 
{2490904,2490903}, 
{2490902,2490897}, 
{2490892,2490896}, 
{2490895,2490894}, 
{2490911,2490910}, 
{2490909,2490908}, 
{2490907,2490897}, 
{2490942,2490943}, 
{2490944,2490945}, 
{2490946,2490947}, 
{2490948,2490949}, 
{2490949,2490948}, 
{2490947,2490946}, 
{2490945,2490944}, 
{2490943,2490942}, 
{2490897,2490907}, 
{2490908,2490909}, 
{2490910,2490911}, 
{2490912,2490906}, 
{2555971,2555972}, 
{2555973,2555974}, 
{2555975,2555966}, 
{2555979,2555980}, 
{2555981,2555982}, 
{2555983,2555984}, 
{2555985,2555986}, 
{2555987,2555978}, 
{2555989,2555990}, 
{2555991,2555992}, 
{2555951,2555952}, 
{2555953,2555954}, 
{2555955,2555956}, 
{2555957,2555948}, 
{2555959,2555960}, 
{2555961,2555962}, 
{2555963,2555964}, 
{1966311,1966310}, 
{1966309,1966298}, 
{1966307,1966306}, 
{1966305,1966304}, 
{1966303,1966302}, 
{1966301,1966300}, 
{1966299,1966288}, 
{1966277,1966276}, 
{1966275,1966274}, 
{1966264,1966272}, 
{1966271,1966270}, 
{1966269,1966268}, 
{1966267,1966266}, 
{1966265,1966255}, 
{1966263,1966262}, 
{1966261,1966260}, 
{1966259,1966258}, 
{2490712,2490713}, 
{720982,720981}, 
{720977,720979}, 
{720978,1245252}, 
{1245261,1245260}, 
{1245259,1245258}, 
{1245257,1245256}, 
{1245255,1245254}, 
{1245253,1245245}, 
{1245251,1245250}, 
{1245249,1245248}, 
{1245247,1245246}, 
{721177,721176}, 
{721176,721177}, 
{721152,721151}, 
{721150,721149}, 
{721141,721143}, 
{721144,721145}, 
{721146,721147}, 
{721142,720984}, 
{720989,720988}, 
{720987,720986}, 
{720985,720949}, 
{720950,720951}, 
{720952,720953}, 
{720954,720955}, 
{720956,720957}, 
{720948,720968}, 
{720969,720970}, 
{720971,720972}, 
{720973,720967}, 
{720974,720975}, 
{720976,1245246}, 
{1245247,1245248}, 
{1245249,1245250}, 
{1245251,1245245}, 
{1245253,1245254}, 
{1245255,1245256}, 
{1245257,1245258}, 
{1245259,1245260}, 
{1245261,1245252}, 
{720978,720979}, 
{720977,720981}, 
{720950,720949}, 
{720985,720986}, 
{720987,720988}, 
{720989,720984}, 
{721142,721147}, 
{721146,721145}, 
{721144,721143}, 
{721141,721149}, 
{721150,721151}, 
{655443,655503}, 
{655504,655505}, 
{655506,655507}, 
{655502,655491}, 
{655492,655493}, 
{655494,655495}, 
{655496,655497}, 
{655490,655498}, 
{655499,655500}, 
{655501,720964}, 
{720965,720966}, 
{720963,721141}, 
{720963,720966}, 
{720965,720964}, 
{655501,655500}, 
{655499,655498}, 
{655490,655497}, 
{655496,655495}, 
{655494,655493}, 
{655492,655491}, 
{655502,655507}, 
{655506,655505}, 
{655504,655503}, 
{655443,655449}, 
{196791,196790}, 
{128,129}, 
{130,131}, 
{132,133}, 
{134,126}, 
{123,125}, 
{124,65884}, 
{65883,65882}, 
{65881,65880}, 
{65881,65882}, 
{65883,65884}, 
{124,125}, 
{123,126}, 
{134,133}, 
{132,131}, 
{130,129}, 
{131186,131185}, --foldut
{131185,131186}, 
{721233,721234}, 
{2097475,2097476},--sfkorhaz 
{2097477,2097478}, 
{2097478,2097477}, 
{2097476,2097475}, 

}

gpsRoute = false
gpsThread = false
gpsWaypoints = {}
nextWp = false
turnAround = false
currentWaypoint = false
waypointInterpolation = false
waypointEndInterpolation = false
reRouting = false

local gpsColshapes = false
local colshapeElements = {}
local routeInstructions = {}

local checkForRerouteTimer = false
local rerouteCheckTime = 1500

addEventHandler("onClientResourceStart", getResourceRootElement(),
	function ()
		for _, node in ipairs(disallowedNodes) do
			local area = math.floor(node[1] / 65536)
			local defaultNeighbours = shallowcopy(vehicleNodes[area][node[1]].neighbours)
			
			vehicleNodes[area][node[1]].neighbours = {}
			
			for k, v in pairs(defaultNeighbours) do
				if k ~= node[2] then
					vehicleNodes[area][node[1]].neighbours[k] = v
				end
			end
		end
		
		if occupiedVehicle then
			if getElementData(occupiedVehicle, "gpsDestination") then
				local destination = getElementData(occupiedVehicle, "gpsDestination")
				gpsThread = coroutine.create(makeRoute)
				coroutine.resume(gpsThread, destination[1], destination[2], true)
			end
		end
	end
)

addCommandHandler("tognodes",
	function ()
		if getElementData(localPlayer, "acc.adminLevel") >= 9 then
			if isEventHandlerAdded("onClientRender", root, renderTheNodes) then
				removeEventHandler("onClientRender", root, renderTheNodes)
			else
				addEventHandler("onClientRender", root, renderTheNodes)
			end
		end
	end
)

function renderTheNodes()
	local playerPosX, playerPosY, playerPosZ = getElementPosition(localPlayer)
	local areaID = math.floor((playerPosY + 3000) / 750) * 8 + math.floor((playerPosX + 3000) / 750)
	local drawn = {}
	
	for id, node in pairs(vehicleNodes[areaID]) do
		if getDistanceBetweenPoints3D(playerPosX, playerPosY, playerPosZ, node.x, node.y, playerPosZ) < 100 then
			local screenX, screenY = getScreenFromAsenaPosition(node.x, node.y, node.z)
			
			if screenX and screenY then
				dxDrawText(tostring(id), screenX - 10, screenY - 5)
			end
			
			for neighbour in pairs(node.neighbours) do
				if not drawn[neighbour .. "-" .. id] then
					local nodeNeighbour = vehicleNodes[math.floor(neighbour / 65536)][neighbour]
					
					dxDrawLine3D(node.x, node.y, node.z + 1, nodeNeighbour.x, nodeNeighbour.y, nodeNeighbour.z + 1, tocolor(220, 163, 30), 3)
					drawn[id .. "-" .. neighbour] = true
				end
			end
		end
	end
end

function makeRoute(destinationX, destinationY, uTurned)
	waypointInterpolation = false
	


	if isElement(currentGPSSound) then
		destroyElement(currentGPSSound)
	end
	
	if isTimer(currentGPSSoundTimer) then
		killTimer(currentGPSSoundTimer)
	end
	
	if isTimer(checkForRerouteTimer) then
		killTimer(checkForRerouteTimer)
	end
	
	clearGPSRoute()
	gpsWaypoints = {}
	turnAround = false
	gpsLines = {}
	gpsRoute = false
	
	if gpsColshapes then
		for k, v in pairs(gpsColshapes) do
			colshapeElements[gpsColshapes[k]] = nil
			
			if isElement(v) then
				destroyElement(v)
			end
				
			gpsColshapes[k] = nil
		end
	end
	
	gpsColshapes = {}
	colshapeElements = {}
	
	if not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	
	local currentZoneName = getZoneName(vehiclePosX, vehiclePosY, 0)
	local currentCityName = getZoneName(vehiclePosX, vehiclePosY, 0, true)
	local zoneName = getZoneName(destinationX, destinationY, 0)
	local cityName = getZoneName(destinationX, destinationY, 0, true)
	local disallowedZones = {
		Unknown = false,
		
		["Los Santos"] = false,
		["Red County"] = false,
		
		["San Fierro"] = false,
		["San Fierro Bay"] = false,
		["Gant Bridge"] = false,
		["Flint County"] = false,
		["Whetstone"] = false,
		
		["Las Venturas"] = true,
		["Bone County"] = true,
		["Tierra Robada"] = true
	}
	
	if disallowedZones[currentZoneName] or disallowedZones[currentCityName] then
		playOneGPSSound("nincskapcs")
		setElementData(occupiedVehicle, "gpsDestination", false)
		return false
	end
	
	if disallowedZones[zoneName] or disallowedZones[cityName] then
		showInfoLine("e", "Nem található útvonal a kiválasztott célhoz.")
		playOneGPSSound("masikuticel")
		setElementData(occupiedVehicle, "gpsDestination", false)
		return false
	end
	
	local routePath = calculateRoute(vehiclePosX, vehiclePosY, destinationX, destinationY)
	
	if not routePath then
		if not uTurned then
			playOneGPSSound("masikuticel")
			showInfoLine("e", "Nem található útvonal a kiválasztott célhoz.")
		else
			playOneGPSSound("nincskapcs")
		end
		
		setElementData(occupiedVehicle, "gpsDestination", false)
		return false
	end
	
	gpsRoute = routePath
	nextWp = 1
	currentWaypoint = 0
	currentNode = 1
	checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
	local waypointTurns = {}


	
	for i, node in ipairs(gpsRoute) do
		local nextNode = gpsRoute[i + 1]
		local previousNode = gpsRoute[i - 1]
		
		if i > 1 and i < #gpsRoute then
			for k in pairs(node.neighbours) do
				if previousNode and nextNode and k ~= previousNode.id and k ~= nextNode.id then
					local turnAngle = math.deg(getAngle(node.x - previousNode.x, node.y - previousNode.y, nextNode.x - node.x, nextNode.y - node.y))
					
					if turnAngle > 10 then
						table.insert(waypointTurns, {i, "right"})
						break
					end
					
					if turnAngle < -10 then
						table.insert(waypointTurns, {i, "left"})
					end
					
					break
				end
			end
		end
		
		gpsColshapes[i] = createColTube(node.x, node.y, node.z - 0.3, 8, 5)
		colshapeElements[gpsColshapes[i]] = i
		addGPSLine(node.x, node.y)
	end


	local lastTurnNodeId = 1
	local nextTurnId = 1
	local nextTurnNode = {}
	if waypointTurns[1] and waypointTurns[1][1] then nextTurnNode = waypointTurns[1][1] end


	for turn = 1, #waypointTurns do
		local nextTurnNodeId = waypointTurns[nextTurnId][1]
		nextTurnNode = waypointTurns[turn][1]
		
		if turn == 1 then
			nextTurnNode = 1
			nextTurnId = 1
			lastTurnNodeId = 1
			nextTurnNodeId = 1
		end
		
		local distanceBetweenWaypoints = 0 + getDistanceBetweenPoints2D(gpsRoute[nextTurnNode].x, gpsRoute[nextTurnNode].y, gpsRoute[waypointTurns[nextTurnId][1]].x, gpsRoute[waypointTurns[nextTurnId][1]].y)
		
		if distanceBetweenWaypoints > 600 then
			if turn == 1 then
				nextTurnNode = waypointTurns[turn][1]
			end
			
			for i = lastTurnNodeId, tonumber(nextTurnNode) or #gpsRoute do
				if 0 + getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[nextTurnNodeId].x, gpsRoute[nextTurnNodeId].y) > distanceBetweenWaypoints - 500 then
					table.insert(gpsWaypoints, {i, "forward"})
					break
				end
			end
		end

		lastTurnNodeId = waypointTurns[turn][1]
		nextTurnId = turn
		
		table.insert(gpsWaypoints, waypointTurns[turn])
	end
	
	table.insert(gpsWaypoints, {"finish", "finish"})
	
	for i = 1, tonumber(gpsWaypoints[nextWp][1]) or #gpsRoute do
		gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[1].x, gpsRoute[1].y) / 0.9
	end
	
	local vehicleOffsetX, vehicleOffsetY = getPositionFromElementOffset(occupiedVehicle, -1, 0, 0)
	local vehicleAngle = math.deg(getAngle(gpsRoute[2].x - gpsRoute[1].x, gpsRoute[2].y - gpsRoute[1].y, vehicleOffsetX - vehiclePosX, vehicleOffsetY - vehiclePosY))
	
	if vehicleAngle > 0 then
		turnAroundCheckTick = getTickCount()
		
		if not uTurned then
			currentGPSSound = setTimer(playGPSSound, 1750, 1, "forduljvissza")
		else
			playGPSSound("forduljvissza")
		end
		
		turnAround = true
	end

	lastDestinationX = destinationX
	lastDestinationY = destinationY
	processGPSLines()
	
	if isElement(selectedRouteSound) then
		destroyElement(selectedRouteSound)
	end
	
	selectedRouteSound = false
	
	if not uTurned then
	--	selectedRouteSound = playSound("gps/sounds/" .. 1 .. "/uticel.mp3")
	end
end

addEventHandler("onClientColShapeHit", getRootElement(),
	function (element)
		if colshapeElements[source] and element == localPlayer then
			local currentShape = colshapeElements[source]
			
			clearGPSRoute()
			
			if currentShape >= 2 then
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				checkForRerouteTimer = false
				turnAround = false
			end
			
			if currentShape == #gpsRoute then
				playGPSSound("finish")
				
				for i = 1, currentShape do
					if isElement(gpsColshapes[i]) then
						destroyElement(gpsColshapes[i])
					end
					
					gpsColshapes[i] = nil
				end
				
				nextWp = false
				
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				checkForRerouteTimer = false
				setElementData(occupiedVehicle, "gpsDestination", false)
				return
			else
				for i = 1, currentShape do
					if isElement(gpsColshapes[i]) then
						destroyElement(gpsColshapes[i])
					end
					
					gpsColshapes[i] = nil
				end
				
				for i = currentShape, #gpsRoute do
					addGPSLine(gpsRoute[i].x, gpsRoute[i].y)
				end
				
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				currentNode = currentShape + 1
				turnAroundCheckTick = getTickCount()
				checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
				reRouting = false
				processGPSLines()
			end
			
			if gpsWaypoints[nextWp] and gpsWaypoints[nextWp][1] ~= "finish" then
				if currentShape >= gpsWaypoints[nextWp][1] then
					nextWp = nextWp + 1
					routeInstructions = {}
					
					for i = currentShape, tonumber(gpsWaypoints[nextWp][1]) or #gpsRoute do
						gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[currentShape].x, gpsRoute[currentShape].y) / 0.9
					end
				else
					gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[currentShape].x, gpsRoute[currentShape].y, gpsRoute[gpsWaypoints[nextWp][1]].x, gpsRoute[gpsWaypoints[nextWp][1]].y) / 0.9

					if gpsWaypoints[nextWp][2] == "forward" and not routeInstructions["forward"] and currentShape > 2 then
						if gpsWaypoints[nextWp - 1] and currentShape < 2 + gpsWaypoints[nextWp - 1][1] then
							return
						end
						
						routeInstructions["forward"] = true
						playGPSSound("egyenes")
						return
					end
					
					local nextWaypointDistance = math.floor(gpsWaypoints[nextWp][3] / 10) * 10
					
					if nextWaypointDistance <= 50 and not routeInstructions[50] then
						routeInstructions[50] = true
						routeInstructions[250] = true
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						if gpsWaypoints[nextWp][2] == "left" then
							playGPSSound("balra")
						elseif gpsWaypoints[nextWp][2] == "right" then
							playGPSSound("jobbra")
						end
						
						return
					end

					if nextWaypointDistance > 230 and nextWaypointDistance <= 250 and not routeInstructions[250] then
						routeInstructions[250] = true
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						if gpsWaypoints[nextWp][2] == "left" then
							playGPSSound("menj;200;50;metert;majd;balra")
						elseif gpsWaypoints[nextWp][2] == "right" then
							playGPSSound("menj;200;50;metert;majd;jobbra")
						end
						
						return
					end
					
					if nextWaypointDistance > 480 and nextWaypointDistance <= 500 and not routeInstructions[500] then
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						if gpsWaypoints[nextWp][2] == "left" then
							playGPSSound("menj;500;metert;majd;balra")
						elseif gpsWaypoints[nextWp][2] == "right" then
							playGPSSound("menj;500;metert;majd;jobbra")
						end
						
						return
					end
					
					if nextWaypointDistance > 1180 and nextWaypointDistance <= 1200 and not routeInstructions[1200] then
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						if gpsWaypoints[nextWp][2] == "left" then
							playGPSSound("menj;1000;200;metert;majd;balra")
						elseif gpsWaypoints[nextWp][2] == "right" then
							playGPSSound("menj;1000;200;metert;majd;jobbra")
						end
						
						return
					end
					
					if nextWaypointDistance > 1480 and nextWaypointDistance <= 1500 and not routeInstructions[1500] then
						routeInstructions[1500] = true
						
						if gpsWaypoints[nextWp][2] == "left" then
							playGPSSound("menj;1000;500;metert;majd;balra")
						elseif gpsWaypoints[nextWp][2] == "right" then
							playGPSSound("menj;1000;500;metert;majd;jobbra")
						end
						
						return
					end
				end
			else
				for i = currentShape, #gpsRoute do
					gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[currentShape].x, gpsRoute[currentShape].y) / 0.9
				end
			end
		end
	end
)

addEventHandler("onClientVehicleEnter", getRootElement(),
	function (player)
		if player == localPlayer and getElementData(source, "gpsDestination") then
			local destination = getElementData(source, "gpsDestination")
			gpsThread = coroutine.create(makeRoute)
			coroutine.resume(gpsThread, destination[1], destination[2], true)
		end
	end
)

addEventHandler("onClientVehicleExit", getRootElement(),
	function (player)
		if player == localPlayer and gpsRoute then
			endRoute()
		end
	end
)

addEventHandler("onClientElementDestroy", getRootElement(),
	function ()
		if source == occupiedVehicle and getElementData(source, "gpsDestination") then
			setElementData(source, "gpsDestination", false)
			
			if gpsRoute then
				endRoute()
			end
		end
	end
)

function calculateRoute(x1, y1, x2, y2)
	local startNode = getVehicleNodeClosestToPoint(x1, y1)
	local endNode = getVehicleNodeClosestToPoint(x2, y2)
	
	if not startNode then
		playOneGPSSound("nincskapcs")
		return false
	end
	
	if not endNode  then
		playOneGPSSound("masikuticel")
		return false
	end
	

	local path = calculatePath(startNode, endNode)
	local clipboard_string = ""
	for i=1,#path-1 do
		if (i%2) == 1 then
			clipboard_string = clipboard_string.."{"..(path[i].id)..","..(path[i+1].id).."}, \n"
		end
	end
	setClipboard(clipboard_string)
	return path
end

addCommandHandler( "getnode", function()
	local x,y,_ = getElementPosition( localPlayer )
	local node = getVehicleNodeClosestToPoint(x,y)
	outputChatBox(tostring(node.id))
end)

function endRoute()
	if gpsRoute then
		if gpsColshapes then
			for k, v in pairs(gpsColshapes) do
				colshapeElements[gpsColshapes[k]] = nil
				
				if isElement(v) then
					destroyElement(v)
				end
					
				gpsColshapes[k] = nil
			end
		end
		
		nextWp = false
		
		if isTimer(checkForRerouteTimer) then
			killTimer(checkForRerouteTimer)
		end
		
		checkForRerouteTimer = false
		clearGPSRoute()
		waypointEndInterpolation = getTickCount()
		gpsRoute = false
		gpsThread = false
	end
end

function reRoute(checkShape)
	if not gpsRoute or not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	
	if getDistanceBetweenPoints2D(gpsRoute[checkShape].x, gpsRoute[checkShape].y, vehiclePosX, vehiclePosY) >= 50 then
		if not makeRoute(lastDestinationX, lastDestinationY, true) then
			checkForRerouteTimer = setTimer(checkForReroute, 10000, 1)
			reRouting = true
		end
	else
		checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
		reRouting = false
	end
end

function checkForReroute()
	if not gpsRoute or not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	local nextColshapeDistance = getDistanceBetweenPoints2D(gpsRoute[currentNode].x, gpsRoute[currentNode].y, vehiclePosX, vehiclePosY)

	if nextColshapeDistance >= 30 and nextColshapeDistance < 80 and gpsRoute[currentNode + 1] and turnAroundCheckTick and getTickCount() - turnAroundCheckTick > 5000 then
		local vehicleOffsetX, vehicleOffsetY = getPositionFromElementOffset(occupiedVehicle, -1, 0, 0)
		local vehicleAngle = math.deg(getAngle(gpsRoute[currentNode + 1].x - gpsRoute[currentNode].x, gpsRoute[currentNode + 1].y - gpsRoute[currentNode].y, vehicleOffsetX - vehiclePosX, vehicleOffsetY - vehiclePosY))
		
		if vehicleAngle > 0 then
			turnAroundCheckTick = getTickCount()
			checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
			playGPSSound("forduljvissza")
			turnAround = true
			reRouting = false
			return
		else
			turnAround = false
			reRouting = false
		end
	end
	
	if isTimer(checkForRerouteTimer) then
		killTimer(checkForRerouteTimer)
	end
	
	if nextColshapeDistance > 100 then
		checkForRerouteTimer = setTimer(reRoute, math.random(3000, 5000), 1, currentNode)
		playGPSSound("ujratervezes")
		reRouting = getTickCount()
	else
		checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
	end
end

function playGPSSound(sounds)
	
	
end

function playNextGPSSound(sounds, count)
	
		
end

function playOneGPSSound(sound)
	
	
	
end

function getPositionFromElementOffset(element, x, y, z)
	local elementMatrix = getElementMatrix(element)
	
	local offsetX = x * elementMatrix[1][1] + y * elementMatrix[2][1] + z * elementMatrix[3][1] + elementMatrix[4][1]
	local offsetY = x * elementMatrix[1][2] + y * elementMatrix[2][2] + z * elementMatrix[3][2] + elementMatrix[4][2]
	local offsetZ = x * elementMatrix[1][3] + y * elementMatrix[2][3] + z * elementMatrix[3][3] + elementMatrix[4][3]
	
	return offsetX, offsetY, offsetZ
end

function getAngle(x1, y1, x2, y2)
	local angle = math.atan2(x2, y2) - math.atan2(x1, y1)
	
	if angle <= -math.pi then
		angle = angle + math.pi * 2
	elseif angle > math.pi then
		angle = angle - math.pi * 2
	end
	
	return angle
end

function shallowcopy(t)
	if type(t) ~= "table" then
		return t
	end
	
	local target = {}
	for k, v in pairs(t) do
		target[k] = v
	end
	return target
end

function calculatePath(startNode, endNode)
	local usedNodes = {[startNode.id] = true}
	local currentNodes = {}
	local ways = {}
	
	for id, distance in pairs(startNode.neighbours) do
		usedNodes[id] = true
		currentNodes[id] = distance
		ways[id] = {startNode.id}
	end
	
	while true do
		local currentNode = -1
		local maxDistance = 10000
		
		for id, distance in pairs(currentNodes) do
			if distance < maxDistance then
				currentNode = id
				maxDistance = distance
			end
		end
		
		if currentNode == -1 then
			return false
		end
		
		if endNode.id == currentNode then
			local lastNode = currentNode
			local foundedNodes = {}
			
			while (tonumber(lastNode) ~= nil) do
				local node = getVehicleNodeByID(lastNode)
				table.insert(foundedNodes, 1, node)
				lastNode = ways[lastNode]
			end
			
			return foundedNodes
		end
		
		for id, distance in pairs(getVehicleNodeByID(currentNode).neighbours) do
			if not usedNodes[id] then
				ways[id] = currentNode
				currentNodes[id] = maxDistance + distance
				usedNodes[id] = true
			end
		end
		
		currentNodes[currentNode] = nil
	end
end

function getVehicleNodeByID(nodeID)
	local areaID = math.floor(nodeID / 65536)
	if areaID >= 0 and areaID <= 63 then
		return vehicleNodes[areaID][nodeID]
	end
end

function getVehicleNodeClosestToPoint(x, y)
	local foundedNode = -1
	local lastNodeDistance = 10000
	local areaID = math.floor((y + 3000) / 750) * 8 + math.floor((x + 3000) / 750)
	
	if not vehicleNodes[areaID] then
		return false
	end
	
	for _, node in pairs(vehicleNodes[areaID]) do
		local nodeDistance = getDistanceBetweenPoints2D(x, y, node.x, node.y)
		
		if lastNodeDistance > nodeDistance then
			lastNodeDistance = nodeDistance
			foundedNode = node
		end
	end
	
	return foundedNode
end

_playSound = playSound

function playSound(path,forced)
	if forced == nil then forced = false end
	if getNavigatorSound() or forced then
		return _playSound(path)
	end
	return nil
end